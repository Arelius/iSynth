@module Saw(frequency, retrigger):
  members:
    float position = 0, last_trigger = 0
  fill:
    *output++ = (m_position-0.5f)*2;
    m_position += frequency[i] / sample_rate;
    m_position -= int(m_position);
    if(m_last_trigger < 0.1 && retrigger[i] > 0.9)
      m_position = 0;
    m_last_trigger = retrigger[i];
  output_range:
    *out_min = -1;
    *out_max =  1;
  input_range:
    frequency: 0, 22050
@

@module Pulse(frequency, pulsewidth, retrigger):
  members:
    float position = 0, last_trigger = 0
  fill:
    *output++ = (m_position > pulsewidth[i]) ? -1.0f:1.0f;
    m_position += frequency[i] / sample_rate;
    m_position -= int(m_position);
    if(m_last_trigger < 0.1 && retrigger[i] > 0.9)
      m_position = 0;
    m_last_trigger = retrigger[i];
  output_range:
    *out_min = -1;
    *out_max =  1;
  input_range:
    frequency: 0, 22050
@

@module Sine(frequency, retrigger):
  members:
    float position = 0, last_trigger = 0
  fill:
    *output++ = sin(m_position*2*pi);
    m_position += frequency[i] / sample_rate;
    m_position -= int(m_position);
    if(m_last_trigger < 0.1 && retrigger[i] > 0.9)
      m_position = 0;
    m_last_trigger = retrigger[i];
  output_range:
    *out_min = -1;
    *out_max =  1;
  input_range:
    frequency: 0, 22050
@

@module Triangle(frequency, retrigger):
  members:
    float position = 0, last_trigger = 0
  fill:
    if(m_position < .5f) *output++ = (m_position-0.25f) *  4;
    else                 *output++ = (m_position-0.75f) * -4;
    m_position += frequency[i] / sample_rate;
    m_position -= int(m_position);
    if(m_last_trigger < 0.1 && retrigger[i] > 0.9)
      m_position = 0;
    m_last_trigger = retrigger[i];
  output_range:
    *out_min = -1;
    *out_max =  1;
  input_range:
    frequency: 0, 22050
@

@module Noise():
  fill:
    *output++ = 2.0f*rand()/RAND_MAX - 1.0;
  output_range:
    *out_min = -1;
    *out_max =  1;
@

@module Sample(string sample_name, frequency, retrigger, loop_start, loop_end):
  members:
    float   position         = 0
    WaveIn* sample           = 0
    float   rate_coefficient = 0
    float   last_trigger     = 0
  initialize:
    m_sample = new WaveIn(m_sample_name);
    m_rate_coefficient = m_sample->nativeSampleRate() / middle_c /
                         m_sample->length() / sample_rate;
  misc:
    ~Sample() { delete m_sample; }
  fill:
    *output++ = m_sample->valueAt(m_position);
    m_position += frequency[i] * m_rate_coefficient;
    
    if(m_last_trigger < 0.1 && retrigger[i] > 0.9)
      m_position = 0;
    m_last_trigger = retrigger[i];

    if(m_position > loop_end[i])
      m_position -= (loop_end[i] - loop_start[i]);
  output_range:
    *out_min = -1;
    *out_max =  1;
  input_range:
    frequency: 0, 22050
    retrigger: 0, 1
    loop_start: 0, 1
    loop_end: 0, 1
@

@module Rescaler(input, float to_min, float to_max):
  members:
    float from_min = 0, from_range = 0, to_range = 0
  initialize:
    float from_max;
    m_input->getOutputRange(&m_from_min, &from_max);
    m_to_range   = m_to_max - m_to_min;      
    m_from_range = from_max - m_from_min;
  fill:
    *output++ = (input[i]-m_from_min) / m_from_range * m_to_range + m_to_min;
  output_range:
    *out_min = m_to_min;
    *out_max = m_to_min + m_to_range;
    if(*out_max < *out_min) swap(*out_max, *out_min);
@

@module Filter(input, cutoff, resonance):
  members:
    float oldcutoff = -1, oldresonance = -1, scale = 0
    float f = 0, k = 0, p = 0, r = 0
    float y1 = 0, y2 = 0, y3 = 0, y4 = 0
    float oldx = 0, oldy1 = 0, oldy2 = 0, oldy3 = 0
  
  fill:
    if(m_oldcutoff != cutoff[i] || m_oldresonance != resonance[i])
    {
      recalculateFilter(cutoff[i], resonance[i]);
      m_oldcutoff = cutoff[i], m_oldresonance = resonance[i];
    }
    m_oldcutoff = cutoff[i], m_oldresonance = resonance[i];
      
    //Inverted feed back for corner peaking
    float x = input[i] - m_r*m_y4;

    //Four cascaded onepole filters (bilinear transform)
    m_y1 =    x*m_p + m_oldx *m_p - m_k*m_y1;
    m_y2 = m_y1*m_p + m_oldy1*m_p - m_k*m_y2;
    m_y3 = m_y2*m_p + m_oldy2*m_p - m_k*m_y3;
    m_y4 = m_y3*m_p + m_oldy3*m_p - m_k*m_y4;

    //Clipper band limited sigmoid
    m_y4 -= pow(m_y4, 3)/6;

    m_oldx  = x;
    m_oldy1 = m_y1;
    m_oldy2 = m_y2;
    m_oldy3 = m_y3;
    
    *output++ = m_y4;  

  output_range:
    m_input->getOutputRange(out_min, out_max); // maybe?  this math is hard.

  input_range:
    cutoff: 0, 22050
    resonance: 0, 1

  misc:
    inline void recalculateFilter(float cutoff, float resonance)
    {
      m_f = 2.0f * cutoff / sample_rate;
      m_k = 3.6f*m_f - 1.6f*m_f*m_f -1.0f;
      m_p = (m_k+1.0f)*0.5f;
      m_scale = pow(e, (1.0f-m_p)*1.386249f);
      m_r = resonance * m_scale;
    }
@   

@module Multiply(a, b):
  fill:
    *output++ = a[i]*b[i];
  output_range:
    float a_min, a_max, b_min, b_max;
    m_a->getOutputRange(&a_min, &a_max);
    m_b->getOutputRange(&b_min, &b_max);
    *out_min = min(min(a_min*b_max, b_min*a_max), a_min*b_min);
    *out_max = a_max*b_max;
@

// should i bother giving this an arbitrary parameter count?
@module Add(a, b):
  fill:
    *output++ = a[i] + b[i];
  output_range:
    float a_min, a_max, b_min, b_max;
    m_a->getOutputRange(&a_min, &a_max);
    m_b->getOutputRange(&b_min, &b_max);
    *out_min = a_min + b_min;
    *out_max = a_max + b_max;
@

@module Quantize(input):
  fill:
    *output++ = floor(input[i]+0.5);
  output_range:
    m_input->getOutputRange(out_min, out_max);
    *out_min = floor(*out_min + 0.5);
    *out_max = floor(*out_max + 0.5);
@

@module EnvelopeGenerator(gate, float att, float dec, float sus, float rel):
  members:
    float position = 0, rate = 0
    bool  held     = false
    int   stage    = 0
  misc:
    enum { IDLE = 0, ATTACK, DECAY, SUSTAIN, RELEASE };
  output_range:
    *out_min = 0;
    *out_max = 1;
  input_range:
    gate: 0, 1
  fill:
    if(!m_held)
    { 
      if(gate[i] > 0.9)
      {
        m_stage = ATTACK;
        m_rate = (1-m_position) / (sample_rate*m_att+1);
        m_held = true;
      }
    }
    else
    { 
      if(gate[i] < 0.1)
      {
        m_stage = RELEASE;
        m_rate = -m_position / (sample_rate*m_rel+1);
        m_held = false;
      }
    }

    m_position += m_rate;
    
    switch(m_stage)
    {
      case IDLE: case SUSTAIN: break;
      case ATTACK:
        if(m_position >= 1)          
        {
          m_stage = DECAY;
          m_position = 1;
          m_rate = (m_sus-1) / (sample_rate*m_dec+1);
        }
        break;
      case DECAY:
        if(m_position <= m_sus)
        {
          m_stage = SUSTAIN;
          m_position = m_sus;
          m_rate = 0;
        }
        break;
      case RELEASE:
        if(m_position <= 0.0)
        {
          m_stage = IDLE;
          m_position = 0.0;
          m_rate = 0.0;
        }
        break;
    }
            
    *output++ = m_position; 
@

@module SampleAndHold(source, trigger):
  members:
    bool waiting = true
    float value = 0
    float last_trigger = 0
  output_range:
    m_source->getOutputRange(out_min, out_max);
  input_range:
    trigger: 0, 1
  fill:
    if(m_last_trigger < 0.1 && trigger[i] > 0.9)
      m_value = source[i];
    m_last_trigger = trigger[i];
    *output++ = m_value;
@

@module Limiter(input, preamp):
  fill:
    *output++ = tanh(input[i] * preamp[i]);
  output_range:
    *out_min = -1, *out_max = 1;
  input_range:
    preamp: 1, 10
@

@module Rectifier(input):
  fill:
    *output++ = abs(input[i]);
  output_range:
    float imin, imax;
    m_input->getOutputRange(&imin, &imax);
    *out_min = 0, *out_max = max(abs(imin), abs(imax));
@

@module Clipper(input, min, max):
  fill:
    float sample = input[i];
    if(sample > max[i]) sample = max[i];
    if(sample < min[i]) sample = min[i];
    *output++ = sample;
  output_range:
    float min_min, min_max, max_min, max_max;
    m_min->getOutputRange(&min_min, &min_max);
    m_max->getOutputRange(&max_min, &max_max);
    *out_min = min(min_min, max_min), *out_max = max(min_max, max_max);
@

@module SlewLimiter(input, float up, float down):
  members:
    float last = 0
  initialize:
    float dummy;
    m_input->getOutputRange(&m_last, &dummy);
  fill:
    if(input[i] > m_last) m_last = input[i]*m_up   + m_last*(1-m_up  );
    else                  m_last = input[i]*m_down + m_last*(1-m_down);
    *output++ = m_last;
  output_range:
    m_input->getOutputRange(out_min, out_max);
@

@module NoteToFrequency(input, string scale_name):
  members:
    char* scale=0
    char* closest_notes = new char[128]
  initialize:
    for(int i=0; scales[i].name; i++)
      if(m_scale_name == scales[i].name)
        m_scale = (char *)(scales[i].steps);
    if(m_scale == 0)
      throw ModuleExcept(string("Unknown scale: ")+m_scale_name);
    for(int note=0; note<128; note++)
    {
      int closest = -128;
      int step = 0;
      for(int trying=0; trying<128; trying+=m_scale[step])
      {
        if(m_scale[++step] == 0) step = 0;
        if(abs(trying-note) < abs(closest-note)) closest = trying;
      }
      m_closest_notes[note] = closest;
    }
  misc:
    ~NoteToFrequency() { delete[] m_closest_notes; }
    float freqFromNote(float note)
    {
      return pow(2.0, m_closest_notes[int(note)]/12.0) * note_0;
    }
  output_range:
    *out_min = freqFromNote(1), *out_max = freqFromNote(127);
  input_range:
    input: 0, 127
  fill:
    *output++ = freqFromNote(input[i]);
@

@stereomodule Pan(input, position):
  fill:
    *output++ = input[i] * (1.0-position[i]);
    *output++ = input[i] *      position[i];
  output_range: 
    m_input->getOutputRange(out_min, out_max);
  input_range:
    position: 0, 1
@

@stereomodule StereoAdd(StereoModule a, StereoModule b):
  fill:
    *output++ = *a++ + *b++;
    *output++ = *a++ + *b++;
  output_range:
    float a_min, a_max, b_min, b_max;
    m_a->getOutputRange(&a_min, &a_max);
    m_b->getOutputRange(&b_min, &b_max);
    *out_min = a_min + b_min;
    *out_max = a_max + b_max;
@

@stereomodule PingPongDelay(float len, float filter, input, wet, dry, feedback):
  members:
    int length = int(m_len*sample_rate)
    float* buffer_left  = new float[m_length] 
    float* buffer_right = new float[m_length]
    int read_pos = 1
    int write_pos = 0
    int last_sample_left = 0
    int last_sample_right = 0
  initialize:
    memset(m_buffer_left, 0, sizeof(float)*m_length);
    memset(m_buffer_right, 0, sizeof(float)*m_length);
  misc:    
    ~PingPongDelay()
    {
      delete[] m_buffer_left;
      delete[] m_buffer_right;
    }
  output_range:
    float min, max;
    m_input->getOutputRange(&min, &max);
    *out_min = min*2; // um, i think...
    *out_max = max*2;
  input_range:
    wet: 0, 1
    dry: 0, 1
    feedback: 0, 1
  fill:
    float left_sample = m_buffer_left[m_read_pos]*m_filter +
                        m_last_sample_left*(1-m_filter);
    m_last_sample_left = left_sample;
    m_buffer_left[m_write_pos] = input[i] +
                                 m_buffer_right[m_read_pos] * feedback[i];
    *output++ = input[i]*dry[i] + left_sample*wet[i];
    
    float right_sample = m_buffer_right[m_read_pos]*m_filter +
                        m_last_sample_right*(1-m_filter);
    m_last_sample_right = right_sample;
    m_buffer_right[m_write_pos] = m_buffer_left[m_read_pos] * feedback[i];
    *output++ = input[i]*dry[i] + right_sample*wet[i];
    
    if(++m_write_pos >= m_length) m_write_pos -= m_length;
    if(++m_read_pos  >= m_length) m_read_pos  -= m_length;
@

@stereomodule Rotate(StereoModule input, angle):
  fill:
    float left  = *input++;
    float right = *input++;
    float cos_mul = cos(angle[i]), sin_mul = sin(angle[i]);
    *output++ = left*cos_mul + right*sin_mul;
    *output++ = left*sin_mul + right*cos_mul;
  output_range:
    m_input->getOutputRange(out_min, out_max);
@

/*
class Add : public Module
{
  public:
    Add() {}
    Add(Module &a, Module &b)
    {
      addInput(a);
      addInput(b);
    }

    const char *moduleName() { return "Add"; }

    void addInput(Module &input) { m_inputs.push_back(&input); }

    void fill(float last_fill, int samples)
    {
      if(m_inputs.size() == 0) return;

      memcpy(m_output, m_inputs[0]->output(last_fill, samples),
             samples * sizeof(float));
      for(unsigned int i=1; i<m_inputs.size(); i++)
      {
        const float *input = m_inputs[i]->output(last_fill, samples);
        for(int j=0; j<samples; j++)
          m_output[j] += input[j];
      }
    }

    void getOutputRange(float *out_min, float *out_max)
    {
      *out_min = 0, *out_max = 0;
      for(unsigned int i=0; i<m_inputs.size(); i++)
      {
        float inp_min, inp_max;
        m_inputs[i]->getOutputRange(&inp_min, &inp_max);
        *out_min += inp_min;
        *out_max += inp_max;
      }
    }

    void validateInputRange() {} // don't care

  private:
    std::vector<Module *> m_inputs;
};

// maybe support sweeping the length too?  i bet that would sound awesome
// speed parameter currently unimplemented
class Delay : public Module
{
  public: 
    Delay(float length, float filter, Module &input, Module &wet, Module &dry,
          Module &feedback, Module &speed)
    : m_buffer(new float[int(length*sample_rate)]),
      m_length(int(length*sample_rate)),
      m_read_pos(1), m_write_pos(0), m_last_sample(0), m_filter(filter),
      m_input(input), m_wet(wet), m_dry(dry), m_feedback(feedback),
      m_speed(speed)
    {
      memset(m_buffer, 0, m_length*sizeof(float));
    }
    
    ~Delay()
    {
      delete[] m_buffer;
    }
    
    const char *moduleName() { return "Delay"; }

    void fill(float last_fill, int samples)
    {
      const float *input    = m_input   .output(last_fill, samples);
      const float *wet      = m_wet     .output(last_fill, samples);
      const float *dry      = m_dry     .output(last_fill, samples);
      const float *feedback = m_feedback.output(last_fill, samples);
      const float *speed    = m_speed   .output(last_fill, samples);
      
      for(int i=0; i<samples; i++)
      { 
        float sample = m_buffer[int(floor(m_read_pos))]*m_filter +
                       m_last_sample*(1-m_filter);
        m_last_sample = sample;
        m_output[i] = input[i]*dry[i] + sample * wet[i];
        m_buffer[m_write_pos] = input[i] + sample * feedback[i];
        
        if(++m_write_pos >= m_length) m_write_pos -= m_length;
        if(++m_read_pos  >= m_length) m_read_pos  -= m_length;
      }
    }
  
    void getOutputRange(float *out_min, float *out_max)
    {      
      m_input.getOutputRange(out_min, out_max); // wrong for extreme settings
    }

    void validateInputRange()
    {
      validateWithin(m_wet,      0, 1);
      validateWithin(m_dry,      0, 1);
      validateWithin(m_feedback, 0, 1);
      validateWithin(m_speed,    0, 2);
    }

  private:
    float *m_buffer;
    int m_length;
    float m_filter;
    float m_read_pos;
    float m_last_sample;
    int m_write_pos;
    
    Module &m_input, &m_wet, &m_dry, &m_feedback, &m_speed;
};
*/